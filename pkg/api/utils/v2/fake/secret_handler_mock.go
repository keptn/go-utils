// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package utils_mock

import (
	"github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// SecretHandlerInterfaceMock is a mock implementation of api.SecretHandlerInterface.
//
// 	func TestSomethingThatUsesSecretHandlerInterface(t *testing.T) {
//
// 		// make and configure a mocked api.SecretHandlerInterface
// 		mockedSecretHandlerInterface := &SecretHandlerInterfaceMock{
// 			CreateSecretFunc: func(secret models.Secret) error {
// 				panic("mock out the CreateSecret method")
// 			},
// 			DeleteSecretFunc: func(secretName string, secretScope string) error {
// 				panic("mock out the DeleteSecret method")
// 			},
// 			GetSecretsFunc: func() (*models.GetSecretsResponse, error) {
// 				panic("mock out the GetSecrets method")
// 			},
// 			UpdateSecretFunc: func(secret models.Secret) error {
// 				panic("mock out the UpdateSecret method")
// 			},
// 		}
//
// 		// use mockedSecretHandlerInterface in code that requires api.SecretHandlerInterface
// 		// and then make assertions.
//
// 	}
type SecretHandlerInterfaceMock struct {
	// CreateSecretFunc mocks the CreateSecret method.
	CreateSecretFunc func(secret models.Secret) error

	// DeleteSecretFunc mocks the DeleteSecret method.
	DeleteSecretFunc func(secretName string, secretScope string) error

	// GetSecretsFunc mocks the GetSecrets method.
	GetSecretsFunc func() (*models.GetSecretsResponse, error)

	// UpdateSecretFunc mocks the UpdateSecret method.
	UpdateSecretFunc func(secret models.Secret) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateSecret holds details about calls to the CreateSecret method.
		CreateSecret []struct {
			// Secret is the secret argument value.
			Secret models.Secret
		}
		// DeleteSecret holds details about calls to the DeleteSecret method.
		DeleteSecret []struct {
			// SecretName is the secretName argument value.
			SecretName string
			// SecretScope is the secretScope argument value.
			SecretScope string
		}
		// GetSecrets holds details about calls to the GetSecrets method.
		GetSecrets []struct {
		}
		// UpdateSecret holds details about calls to the UpdateSecret method.
		UpdateSecret []struct {
			// Secret is the secret argument value.
			Secret models.Secret
		}
	}
	lockCreateSecret sync.RWMutex
	lockDeleteSecret sync.RWMutex
	lockGetSecrets   sync.RWMutex
	lockUpdateSecret sync.RWMutex
}

// CreateSecret calls CreateSecretFunc.
func (mock *SecretHandlerInterfaceMock) CreateSecret(secret models.Secret) error {
	if mock.CreateSecretFunc == nil {
		panic("SecretHandlerInterfaceMock.CreateSecretFunc: method is nil but SecretHandlerInterface.CreateSecret was just called")
	}
	callInfo := struct {
		Secret models.Secret
	}{
		Secret: secret,
	}
	mock.lockCreateSecret.Lock()
	mock.calls.CreateSecret = append(mock.calls.CreateSecret, callInfo)
	mock.lockCreateSecret.Unlock()
	return mock.CreateSecretFunc(secret)
}

// CreateSecretCalls gets all the calls that were made to CreateSecret.
// Check the length with:
//     len(mockedSecretHandlerInterface.CreateSecretCalls())
func (mock *SecretHandlerInterfaceMock) CreateSecretCalls() []struct {
	Secret models.Secret
} {
	var calls []struct {
		Secret models.Secret
	}
	mock.lockCreateSecret.RLock()
	calls = mock.calls.CreateSecret
	mock.lockCreateSecret.RUnlock()
	return calls
}

// DeleteSecret calls DeleteSecretFunc.
func (mock *SecretHandlerInterfaceMock) DeleteSecret(secretName string, secretScope string) error {
	if mock.DeleteSecretFunc == nil {
		panic("SecretHandlerInterfaceMock.DeleteSecretFunc: method is nil but SecretHandlerInterface.DeleteSecret was just called")
	}
	callInfo := struct {
		SecretName  string
		SecretScope string
	}{
		SecretName:  secretName,
		SecretScope: secretScope,
	}
	mock.lockDeleteSecret.Lock()
	mock.calls.DeleteSecret = append(mock.calls.DeleteSecret, callInfo)
	mock.lockDeleteSecret.Unlock()
	return mock.DeleteSecretFunc(secretName, secretScope)
}

// DeleteSecretCalls gets all the calls that were made to DeleteSecret.
// Check the length with:
//     len(mockedSecretHandlerInterface.DeleteSecretCalls())
func (mock *SecretHandlerInterfaceMock) DeleteSecretCalls() []struct {
	SecretName  string
	SecretScope string
} {
	var calls []struct {
		SecretName  string
		SecretScope string
	}
	mock.lockDeleteSecret.RLock()
	calls = mock.calls.DeleteSecret
	mock.lockDeleteSecret.RUnlock()
	return calls
}

// GetSecrets calls GetSecretsFunc.
func (mock *SecretHandlerInterfaceMock) GetSecrets() (*models.GetSecretsResponse, error) {
	if mock.GetSecretsFunc == nil {
		panic("SecretHandlerInterfaceMock.GetSecretsFunc: method is nil but SecretHandlerInterface.GetSecrets was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSecrets.Lock()
	mock.calls.GetSecrets = append(mock.calls.GetSecrets, callInfo)
	mock.lockGetSecrets.Unlock()
	return mock.GetSecretsFunc()
}

// GetSecretsCalls gets all the calls that were made to GetSecrets.
// Check the length with:
//     len(mockedSecretHandlerInterface.GetSecretsCalls())
func (mock *SecretHandlerInterfaceMock) GetSecretsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSecrets.RLock()
	calls = mock.calls.GetSecrets
	mock.lockGetSecrets.RUnlock()
	return calls
}

// UpdateSecret calls UpdateSecretFunc.
func (mock *SecretHandlerInterfaceMock) UpdateSecret(secret models.Secret) error {
	if mock.UpdateSecretFunc == nil {
		panic("SecretHandlerInterfaceMock.UpdateSecretFunc: method is nil but SecretHandlerInterface.UpdateSecret was just called")
	}
	callInfo := struct {
		Secret models.Secret
	}{
		Secret: secret,
	}
	mock.lockUpdateSecret.Lock()
	mock.calls.UpdateSecret = append(mock.calls.UpdateSecret, callInfo)
	mock.lockUpdateSecret.Unlock()
	return mock.UpdateSecretFunc(secret)
}

// UpdateSecretCalls gets all the calls that were made to UpdateSecret.
// Check the length with:
//     len(mockedSecretHandlerInterface.UpdateSecretCalls())
func (mock *SecretHandlerInterfaceMock) UpdateSecretCalls() []struct {
	Secret models.Secret
} {
	var calls []struct {
		Secret models.Secret
	}
	mock.lockUpdateSecret.RLock()
	calls = mock.calls.UpdateSecret
	mock.lockUpdateSecret.RUnlock()
	return calls
}
