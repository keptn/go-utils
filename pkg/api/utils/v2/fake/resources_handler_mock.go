// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package utils_mock

import (
	"context"
	"github.com/keptn/go-utils/pkg/api/models"
	"github.com/keptn/go-utils/pkg/api/utils/v2"
	"sync"
)

// ResourcesInterfaceMock is a mock implementation of v2.ResourcesInterface.
//
// 	func TestSomethingThatUsesResourcesInterface(t *testing.T) {
//
// 		// make and configure a mocked v2.ResourcesInterface
// 		mockedResourcesInterface := &ResourcesInterfaceMock{
// 			CreateProjectResourcesFunc: func(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesCreateProjectResourcesOptions) (string, error) {
// 				panic("mock out the CreateProjectResources method")
// 			},
// 			CreateResourceFunc: func(ctx context.Context, resource []*models.Resource, scope v2.ResourceScope, opts v2.ResourcesCreateResourceOptions) (string, error) {
// 				panic("mock out the CreateResource method")
// 			},
// 			CreateResourcesFunc: func(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesCreateResourcesOptions) (*models.EventContext, *models.Error) {
// 				panic("mock out the CreateResources method")
// 			},
// 			DeleteResourceFunc: func(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesDeleteResourceOptions) error {
// 				panic("mock out the DeleteResource method")
// 			},
// 			GetAllServiceResourcesFunc: func(ctx context.Context, project string, stage string, service string, opts v2.ResourcesGetAllServiceResourcesOptions) ([]*models.Resource, error) {
// 				panic("mock out the GetAllServiceResources method")
// 			},
// 			GetAllStageResourcesFunc: func(ctx context.Context, project string, stage string, opts v2.ResourcesGetAllStageResourcesOptions) ([]*models.Resource, error) {
// 				panic("mock out the GetAllStageResources method")
// 			},
// 			GetResourceFunc: func(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesGetResourceOptions) (*models.Resource, error) {
// 				panic("mock out the GetResource method")
// 			},
// 			UpdateProjectResourcesFunc: func(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesUpdateProjectResourcesOptions) (string, error) {
// 				panic("mock out the UpdateProjectResources method")
// 			},
// 			UpdateResourceFunc: func(ctx context.Context, resource *models.Resource, scope v2.ResourceScope, opts v2.ResourcesUpdateResourceOptions) (string, error) {
// 				panic("mock out the UpdateResource method")
// 			},
// 			UpdateServiceResourcesFunc: func(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesUpdateServiceResourcesOptions) (string, error) {
// 				panic("mock out the UpdateServiceResources method")
// 			},
// 		}
//
// 		// use mockedResourcesInterface in code that requires v2.ResourcesInterface
// 		// and then make assertions.
//
// 	}
type ResourcesInterfaceMock struct {
	// CreateProjectResourcesFunc mocks the CreateProjectResources method.
	CreateProjectResourcesFunc func(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesCreateProjectResourcesOptions) (string, error)

	// CreateResourceFunc mocks the CreateResource method.
	CreateResourceFunc func(ctx context.Context, resource []*models.Resource, scope v2.ResourceScope, opts v2.ResourcesCreateResourceOptions) (string, error)

	// CreateResourcesFunc mocks the CreateResources method.
	CreateResourcesFunc func(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesCreateResourcesOptions) (*models.EventContext, *models.Error)

	// DeleteResourceFunc mocks the DeleteResource method.
	DeleteResourceFunc func(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesDeleteResourceOptions) error

	// GetAllServiceResourcesFunc mocks the GetAllServiceResources method.
	GetAllServiceResourcesFunc func(ctx context.Context, project string, stage string, service string, opts v2.ResourcesGetAllServiceResourcesOptions) ([]*models.Resource, error)

	// GetAllStageResourcesFunc mocks the GetAllStageResources method.
	GetAllStageResourcesFunc func(ctx context.Context, project string, stage string, opts v2.ResourcesGetAllStageResourcesOptions) ([]*models.Resource, error)

	// GetResourceFunc mocks the GetResource method.
	GetResourceFunc func(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesGetResourceOptions) (*models.Resource, error)

	// UpdateProjectResourcesFunc mocks the UpdateProjectResources method.
	UpdateProjectResourcesFunc func(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesUpdateProjectResourcesOptions) (string, error)

	// UpdateResourceFunc mocks the UpdateResource method.
	UpdateResourceFunc func(ctx context.Context, resource *models.Resource, scope v2.ResourceScope, opts v2.ResourcesUpdateResourceOptions) (string, error)

	// UpdateServiceResourcesFunc mocks the UpdateServiceResources method.
	UpdateServiceResourcesFunc func(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesUpdateServiceResourcesOptions) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateProjectResources holds details about calls to the CreateProjectResources method.
		CreateProjectResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Resources is the resources argument value.
			Resources []*models.Resource
			// Opts is the opts argument value.
			Opts v2.ResourcesCreateProjectResourcesOptions
		}
		// CreateResource holds details about calls to the CreateResource method.
		CreateResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource []*models.Resource
			// Scope is the scope argument value.
			Scope v2.ResourceScope
			// Opts is the opts argument value.
			Opts v2.ResourcesCreateResourceOptions
		}
		// CreateResources holds details about calls to the CreateResources method.
		CreateResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// Service is the service argument value.
			Service string
			// Resources is the resources argument value.
			Resources []*models.Resource
			// Opts is the opts argument value.
			Opts v2.ResourcesCreateResourcesOptions
		}
		// DeleteResource holds details about calls to the DeleteResource method.
		DeleteResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Scope is the scope argument value.
			Scope v2.ResourceScope
			// Opts is the opts argument value.
			Opts v2.ResourcesDeleteResourceOptions
		}
		// GetAllServiceResources holds details about calls to the GetAllServiceResources method.
		GetAllServiceResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// Service is the service argument value.
			Service string
			// Opts is the opts argument value.
			Opts v2.ResourcesGetAllServiceResourcesOptions
		}
		// GetAllStageResources holds details about calls to the GetAllStageResources method.
		GetAllStageResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// Opts is the opts argument value.
			Opts v2.ResourcesGetAllStageResourcesOptions
		}
		// GetResource holds details about calls to the GetResource method.
		GetResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Scope is the scope argument value.
			Scope v2.ResourceScope
			// Opts is the opts argument value.
			Opts v2.ResourcesGetResourceOptions
		}
		// UpdateProjectResources holds details about calls to the UpdateProjectResources method.
		UpdateProjectResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Resources is the resources argument value.
			Resources []*models.Resource
			// Opts is the opts argument value.
			Opts v2.ResourcesUpdateProjectResourcesOptions
		}
		// UpdateResource holds details about calls to the UpdateResource method.
		UpdateResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *models.Resource
			// Scope is the scope argument value.
			Scope v2.ResourceScope
			// Opts is the opts argument value.
			Opts v2.ResourcesUpdateResourceOptions
		}
		// UpdateServiceResources holds details about calls to the UpdateServiceResources method.
		UpdateServiceResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// Service is the service argument value.
			Service string
			// Resources is the resources argument value.
			Resources []*models.Resource
			// Opts is the opts argument value.
			Opts v2.ResourcesUpdateServiceResourcesOptions
		}
	}
	lockCreateProjectResources sync.RWMutex
	lockCreateResource         sync.RWMutex
	lockCreateResources        sync.RWMutex
	lockDeleteResource         sync.RWMutex
	lockGetAllServiceResources sync.RWMutex
	lockGetAllStageResources   sync.RWMutex
	lockGetResource            sync.RWMutex
	lockUpdateProjectResources sync.RWMutex
	lockUpdateResource         sync.RWMutex
	lockUpdateServiceResources sync.RWMutex
}

// CreateProjectResources calls CreateProjectResourcesFunc.
func (mock *ResourcesInterfaceMock) CreateProjectResources(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesCreateProjectResourcesOptions) (string, error) {
	if mock.CreateProjectResourcesFunc == nil {
		panic("ResourcesInterfaceMock.CreateProjectResourcesFunc: method is nil but ResourcesInterface.CreateProjectResources was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Project   string
		Resources []*models.Resource
		Opts      v2.ResourcesCreateProjectResourcesOptions
	}{
		Ctx:       ctx,
		Project:   project,
		Resources: resources,
		Opts:      opts,
	}
	mock.lockCreateProjectResources.Lock()
	mock.calls.CreateProjectResources = append(mock.calls.CreateProjectResources, callInfo)
	mock.lockCreateProjectResources.Unlock()
	return mock.CreateProjectResourcesFunc(ctx, project, resources, opts)
}

// CreateProjectResourcesCalls gets all the calls that were made to CreateProjectResources.
// Check the length with:
//     len(mockedResourcesInterface.CreateProjectResourcesCalls())
func (mock *ResourcesInterfaceMock) CreateProjectResourcesCalls() []struct {
	Ctx       context.Context
	Project   string
	Resources []*models.Resource
	Opts      v2.ResourcesCreateProjectResourcesOptions
} {
	var calls []struct {
		Ctx       context.Context
		Project   string
		Resources []*models.Resource
		Opts      v2.ResourcesCreateProjectResourcesOptions
	}
	mock.lockCreateProjectResources.RLock()
	calls = mock.calls.CreateProjectResources
	mock.lockCreateProjectResources.RUnlock()
	return calls
}

// CreateResource calls CreateResourceFunc.
func (mock *ResourcesInterfaceMock) CreateResource(ctx context.Context, resource []*models.Resource, scope v2.ResourceScope, opts v2.ResourcesCreateResourceOptions) (string, error) {
	if mock.CreateResourceFunc == nil {
		panic("ResourcesInterfaceMock.CreateResourceFunc: method is nil but ResourcesInterface.CreateResource was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource []*models.Resource
		Scope    v2.ResourceScope
		Opts     v2.ResourcesCreateResourceOptions
	}{
		Ctx:      ctx,
		Resource: resource,
		Scope:    scope,
		Opts:     opts,
	}
	mock.lockCreateResource.Lock()
	mock.calls.CreateResource = append(mock.calls.CreateResource, callInfo)
	mock.lockCreateResource.Unlock()
	return mock.CreateResourceFunc(ctx, resource, scope, opts)
}

// CreateResourceCalls gets all the calls that were made to CreateResource.
// Check the length with:
//     len(mockedResourcesInterface.CreateResourceCalls())
func (mock *ResourcesInterfaceMock) CreateResourceCalls() []struct {
	Ctx      context.Context
	Resource []*models.Resource
	Scope    v2.ResourceScope
	Opts     v2.ResourcesCreateResourceOptions
} {
	var calls []struct {
		Ctx      context.Context
		Resource []*models.Resource
		Scope    v2.ResourceScope
		Opts     v2.ResourcesCreateResourceOptions
	}
	mock.lockCreateResource.RLock()
	calls = mock.calls.CreateResource
	mock.lockCreateResource.RUnlock()
	return calls
}

// CreateResources calls CreateResourcesFunc.
func (mock *ResourcesInterfaceMock) CreateResources(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesCreateResourcesOptions) (*models.EventContext, *models.Error) {
	if mock.CreateResourcesFunc == nil {
		panic("ResourcesInterfaceMock.CreateResourcesFunc: method is nil but ResourcesInterface.CreateResources was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Project   string
		Stage     string
		Service   string
		Resources []*models.Resource
		Opts      v2.ResourcesCreateResourcesOptions
	}{
		Ctx:       ctx,
		Project:   project,
		Stage:     stage,
		Service:   service,
		Resources: resources,
		Opts:      opts,
	}
	mock.lockCreateResources.Lock()
	mock.calls.CreateResources = append(mock.calls.CreateResources, callInfo)
	mock.lockCreateResources.Unlock()
	return mock.CreateResourcesFunc(ctx, project, stage, service, resources, opts)
}

// CreateResourcesCalls gets all the calls that were made to CreateResources.
// Check the length with:
//     len(mockedResourcesInterface.CreateResourcesCalls())
func (mock *ResourcesInterfaceMock) CreateResourcesCalls() []struct {
	Ctx       context.Context
	Project   string
	Stage     string
	Service   string
	Resources []*models.Resource
	Opts      v2.ResourcesCreateResourcesOptions
} {
	var calls []struct {
		Ctx       context.Context
		Project   string
		Stage     string
		Service   string
		Resources []*models.Resource
		Opts      v2.ResourcesCreateResourcesOptions
	}
	mock.lockCreateResources.RLock()
	calls = mock.calls.CreateResources
	mock.lockCreateResources.RUnlock()
	return calls
}

// DeleteResource calls DeleteResourceFunc.
func (mock *ResourcesInterfaceMock) DeleteResource(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesDeleteResourceOptions) error {
	if mock.DeleteResourceFunc == nil {
		panic("ResourcesInterfaceMock.DeleteResourceFunc: method is nil but ResourcesInterface.DeleteResource was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Scope v2.ResourceScope
		Opts  v2.ResourcesDeleteResourceOptions
	}{
		Ctx:   ctx,
		Scope: scope,
		Opts:  opts,
	}
	mock.lockDeleteResource.Lock()
	mock.calls.DeleteResource = append(mock.calls.DeleteResource, callInfo)
	mock.lockDeleteResource.Unlock()
	return mock.DeleteResourceFunc(ctx, scope, opts)
}

// DeleteResourceCalls gets all the calls that were made to DeleteResource.
// Check the length with:
//     len(mockedResourcesInterface.DeleteResourceCalls())
func (mock *ResourcesInterfaceMock) DeleteResourceCalls() []struct {
	Ctx   context.Context
	Scope v2.ResourceScope
	Opts  v2.ResourcesDeleteResourceOptions
} {
	var calls []struct {
		Ctx   context.Context
		Scope v2.ResourceScope
		Opts  v2.ResourcesDeleteResourceOptions
	}
	mock.lockDeleteResource.RLock()
	calls = mock.calls.DeleteResource
	mock.lockDeleteResource.RUnlock()
	return calls
}

// GetAllServiceResources calls GetAllServiceResourcesFunc.
func (mock *ResourcesInterfaceMock) GetAllServiceResources(ctx context.Context, project string, stage string, service string, opts v2.ResourcesGetAllServiceResourcesOptions) ([]*models.Resource, error) {
	if mock.GetAllServiceResourcesFunc == nil {
		panic("ResourcesInterfaceMock.GetAllServiceResourcesFunc: method is nil but ResourcesInterface.GetAllServiceResources was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Project string
		Stage   string
		Service string
		Opts    v2.ResourcesGetAllServiceResourcesOptions
	}{
		Ctx:     ctx,
		Project: project,
		Stage:   stage,
		Service: service,
		Opts:    opts,
	}
	mock.lockGetAllServiceResources.Lock()
	mock.calls.GetAllServiceResources = append(mock.calls.GetAllServiceResources, callInfo)
	mock.lockGetAllServiceResources.Unlock()
	return mock.GetAllServiceResourcesFunc(ctx, project, stage, service, opts)
}

// GetAllServiceResourcesCalls gets all the calls that were made to GetAllServiceResources.
// Check the length with:
//     len(mockedResourcesInterface.GetAllServiceResourcesCalls())
func (mock *ResourcesInterfaceMock) GetAllServiceResourcesCalls() []struct {
	Ctx     context.Context
	Project string
	Stage   string
	Service string
	Opts    v2.ResourcesGetAllServiceResourcesOptions
} {
	var calls []struct {
		Ctx     context.Context
		Project string
		Stage   string
		Service string
		Opts    v2.ResourcesGetAllServiceResourcesOptions
	}
	mock.lockGetAllServiceResources.RLock()
	calls = mock.calls.GetAllServiceResources
	mock.lockGetAllServiceResources.RUnlock()
	return calls
}

// GetAllStageResources calls GetAllStageResourcesFunc.
func (mock *ResourcesInterfaceMock) GetAllStageResources(ctx context.Context, project string, stage string, opts v2.ResourcesGetAllStageResourcesOptions) ([]*models.Resource, error) {
	if mock.GetAllStageResourcesFunc == nil {
		panic("ResourcesInterfaceMock.GetAllStageResourcesFunc: method is nil but ResourcesInterface.GetAllStageResources was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Project string
		Stage   string
		Opts    v2.ResourcesGetAllStageResourcesOptions
	}{
		Ctx:     ctx,
		Project: project,
		Stage:   stage,
		Opts:    opts,
	}
	mock.lockGetAllStageResources.Lock()
	mock.calls.GetAllStageResources = append(mock.calls.GetAllStageResources, callInfo)
	mock.lockGetAllStageResources.Unlock()
	return mock.GetAllStageResourcesFunc(ctx, project, stage, opts)
}

// GetAllStageResourcesCalls gets all the calls that were made to GetAllStageResources.
// Check the length with:
//     len(mockedResourcesInterface.GetAllStageResourcesCalls())
func (mock *ResourcesInterfaceMock) GetAllStageResourcesCalls() []struct {
	Ctx     context.Context
	Project string
	Stage   string
	Opts    v2.ResourcesGetAllStageResourcesOptions
} {
	var calls []struct {
		Ctx     context.Context
		Project string
		Stage   string
		Opts    v2.ResourcesGetAllStageResourcesOptions
	}
	mock.lockGetAllStageResources.RLock()
	calls = mock.calls.GetAllStageResources
	mock.lockGetAllStageResources.RUnlock()
	return calls
}

// GetResource calls GetResourceFunc.
func (mock *ResourcesInterfaceMock) GetResource(ctx context.Context, scope v2.ResourceScope, opts v2.ResourcesGetResourceOptions) (*models.Resource, error) {
	if mock.GetResourceFunc == nil {
		panic("ResourcesInterfaceMock.GetResourceFunc: method is nil but ResourcesInterface.GetResource was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Scope v2.ResourceScope
		Opts  v2.ResourcesGetResourceOptions
	}{
		Ctx:   ctx,
		Scope: scope,
		Opts:  opts,
	}
	mock.lockGetResource.Lock()
	mock.calls.GetResource = append(mock.calls.GetResource, callInfo)
	mock.lockGetResource.Unlock()
	return mock.GetResourceFunc(ctx, scope, opts)
}

// GetResourceCalls gets all the calls that were made to GetResource.
// Check the length with:
//     len(mockedResourcesInterface.GetResourceCalls())
func (mock *ResourcesInterfaceMock) GetResourceCalls() []struct {
	Ctx   context.Context
	Scope v2.ResourceScope
	Opts  v2.ResourcesGetResourceOptions
} {
	var calls []struct {
		Ctx   context.Context
		Scope v2.ResourceScope
		Opts  v2.ResourcesGetResourceOptions
	}
	mock.lockGetResource.RLock()
	calls = mock.calls.GetResource
	mock.lockGetResource.RUnlock()
	return calls
}

// UpdateProjectResources calls UpdateProjectResourcesFunc.
func (mock *ResourcesInterfaceMock) UpdateProjectResources(ctx context.Context, project string, resources []*models.Resource, opts v2.ResourcesUpdateProjectResourcesOptions) (string, error) {
	if mock.UpdateProjectResourcesFunc == nil {
		panic("ResourcesInterfaceMock.UpdateProjectResourcesFunc: method is nil but ResourcesInterface.UpdateProjectResources was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Project   string
		Resources []*models.Resource
		Opts      v2.ResourcesUpdateProjectResourcesOptions
	}{
		Ctx:       ctx,
		Project:   project,
		Resources: resources,
		Opts:      opts,
	}
	mock.lockUpdateProjectResources.Lock()
	mock.calls.UpdateProjectResources = append(mock.calls.UpdateProjectResources, callInfo)
	mock.lockUpdateProjectResources.Unlock()
	return mock.UpdateProjectResourcesFunc(ctx, project, resources, opts)
}

// UpdateProjectResourcesCalls gets all the calls that were made to UpdateProjectResources.
// Check the length with:
//     len(mockedResourcesInterface.UpdateProjectResourcesCalls())
func (mock *ResourcesInterfaceMock) UpdateProjectResourcesCalls() []struct {
	Ctx       context.Context
	Project   string
	Resources []*models.Resource
	Opts      v2.ResourcesUpdateProjectResourcesOptions
} {
	var calls []struct {
		Ctx       context.Context
		Project   string
		Resources []*models.Resource
		Opts      v2.ResourcesUpdateProjectResourcesOptions
	}
	mock.lockUpdateProjectResources.RLock()
	calls = mock.calls.UpdateProjectResources
	mock.lockUpdateProjectResources.RUnlock()
	return calls
}

// UpdateResource calls UpdateResourceFunc.
func (mock *ResourcesInterfaceMock) UpdateResource(ctx context.Context, resource *models.Resource, scope v2.ResourceScope, opts v2.ResourcesUpdateResourceOptions) (string, error) {
	if mock.UpdateResourceFunc == nil {
		panic("ResourcesInterfaceMock.UpdateResourceFunc: method is nil but ResourcesInterface.UpdateResource was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *models.Resource
		Scope    v2.ResourceScope
		Opts     v2.ResourcesUpdateResourceOptions
	}{
		Ctx:      ctx,
		Resource: resource,
		Scope:    scope,
		Opts:     opts,
	}
	mock.lockUpdateResource.Lock()
	mock.calls.UpdateResource = append(mock.calls.UpdateResource, callInfo)
	mock.lockUpdateResource.Unlock()
	return mock.UpdateResourceFunc(ctx, resource, scope, opts)
}

// UpdateResourceCalls gets all the calls that were made to UpdateResource.
// Check the length with:
//     len(mockedResourcesInterface.UpdateResourceCalls())
func (mock *ResourcesInterfaceMock) UpdateResourceCalls() []struct {
	Ctx      context.Context
	Resource *models.Resource
	Scope    v2.ResourceScope
	Opts     v2.ResourcesUpdateResourceOptions
} {
	var calls []struct {
		Ctx      context.Context
		Resource *models.Resource
		Scope    v2.ResourceScope
		Opts     v2.ResourcesUpdateResourceOptions
	}
	mock.lockUpdateResource.RLock()
	calls = mock.calls.UpdateResource
	mock.lockUpdateResource.RUnlock()
	return calls
}

// UpdateServiceResources calls UpdateServiceResourcesFunc.
func (mock *ResourcesInterfaceMock) UpdateServiceResources(ctx context.Context, project string, stage string, service string, resources []*models.Resource, opts v2.ResourcesUpdateServiceResourcesOptions) (string, error) {
	if mock.UpdateServiceResourcesFunc == nil {
		panic("ResourcesInterfaceMock.UpdateServiceResourcesFunc: method is nil but ResourcesInterface.UpdateServiceResources was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Project   string
		Stage     string
		Service   string
		Resources []*models.Resource
		Opts      v2.ResourcesUpdateServiceResourcesOptions
	}{
		Ctx:       ctx,
		Project:   project,
		Stage:     stage,
		Service:   service,
		Resources: resources,
		Opts:      opts,
	}
	mock.lockUpdateServiceResources.Lock()
	mock.calls.UpdateServiceResources = append(mock.calls.UpdateServiceResources, callInfo)
	mock.lockUpdateServiceResources.Unlock()
	return mock.UpdateServiceResourcesFunc(ctx, project, stage, service, resources, opts)
}

// UpdateServiceResourcesCalls gets all the calls that were made to UpdateServiceResources.
// Check the length with:
//     len(mockedResourcesInterface.UpdateServiceResourcesCalls())
func (mock *ResourcesInterfaceMock) UpdateServiceResourcesCalls() []struct {
	Ctx       context.Context
	Project   string
	Stage     string
	Service   string
	Resources []*models.Resource
	Opts      v2.ResourcesUpdateServiceResourcesOptions
} {
	var calls []struct {
		Ctx       context.Context
		Project   string
		Stage     string
		Service   string
		Resources []*models.Resource
		Opts      v2.ResourcesUpdateServiceResourcesOptions
	}
	mock.lockUpdateServiceResources.RLock()
	calls = mock.calls.UpdateServiceResources
	mock.lockUpdateServiceResources.RUnlock()
	return calls
}
